# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –Ω–∞—à –º–æ–¥—É–ª—å utils
import json
import random

from aiogram.types import ParseMode
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
import requests

import urllib.parse
import utils as ut
from configure import token
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types.web_app_info import WebAppInfo
from aiogram_calendar import simple_cal_callback 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from python_calendar import SimpleCalendar
from python_clock import SimpleClock, clock_callback


# —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É(–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–≥)
bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())

time_msg = []
board_game_info = None
order_details = {}
delivary_date = 0

def set_main_keyboard_buttons():
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    poll_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    poll_keyboard.add(types.KeyboardButton(text="–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å"))
    poll_keyboard.add(types.KeyboardButton(text="–°–¥–∞—é –Ω–∞—Å—Ç–æ–ª–∫—É"))
    poll_keyboard.add(types.KeyboardButton(text="–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ"))
    return poll_keyboard

def set_player_keyboard_buttons():
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    kb = [
        [
            types.KeyboardButton(text=f"{'üë®‚Äçüë©‚Äçüëß'} –°–µ–º–µ–π–Ω—ã–µ"), 
            types.KeyboardButton(text=f"{'üéØ'} –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        ],
        [
            types.KeyboardButton(text=f"{'üß¨'} –õ–æ–≥–∏—á–µ—Å–∫–∏–µ"), 
            types.KeyboardButton(text=f"{'üéâ'} –í–µ—á–µ—Ä–∏–Ω–æ—á–Ω—ã–µ")
        ],
        [
            types.KeyboardButton(text=f"{'ü•Ç'} –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ"),
            types.KeyboardButton(text=f"{'‚ùì'} –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è")
        ],
    ]
    poll_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
    return poll_keyboard

def set_board_games_buttons():
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    board_games_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    board_games_keyboard.add(types.KeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫', web_app=WebAppInfo(
        url="https://hack1.alieksandrzviez.repl.co/")))
    board_games_keyboard.add(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return board_games_keyboard

def check_order_board_game_status(game_status):
    if isinstance(game_status, int):
        return "–ó–∞–≤–µ—Ä—à–µ–Ω" if not game_status else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    return game_status

#############################################

#–•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú/start‚Äù
@dp.message_handler(commands=["start"], is_reply=False)
async def cmd_start(message: types.Message):
    # –≤—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    hello_sticker = random.choice(ut.hello_stickers)
    start_msg = ut.create_start_msg(message.from_user.first_name)
    buttons = set_main_keyboard_buttons()
    await message.answer_sticker(hello_sticker)
    await message.reply(start_msg, reply_markup=buttons)

#############################################

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å‚Äù
@dp.message_handler(lambda message: message.text == "–•–æ—á—É –∑–∞–∫–∞–∑–∞—Ç—å")
async def cmd_player_board_game(message: types.Message):
    first_player_msg = ut.create_first_player_msg()
    buttons = set_player_keyboard_buttons()
    await message.reply(first_player_msg, reply_markup=buttons)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ‚Äù
@dp.message_handler(lambda message: message.text == f"{'üë®‚Äçüë©‚Äçüëß'} –°–µ–º–µ–π–Ω—ã–µ")
async def cmd_choose_party_board_game(message: types.Message):
    buttons = set_board_games_buttons()
    await message.answer("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–ª–æ–∫: ", reply_markup = buttons)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ‚Äù
@dp.message_handler(lambda message: message.text == f"{'üéØ'} –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
async def cmd_choose_party_board_game(message: types.Message):
    buttons = set_board_games_buttons()
    await message.answer("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–ª–æ–∫: ", reply_markup = buttons)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ‚Äù
@dp.message_handler(lambda message: message.text == f"{'üß¨'} –õ–æ–≥–∏—á–µ—Å–∫–∏–µ")
async def cmd_choose_party_board_game(message: types.Message):
    buttons = set_board_games_buttons()
    await message.answer("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–ª–æ–∫: ", reply_markup = buttons)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ‚Äù
@dp.message_handler(lambda message: message.text == f"{'üéâ'} –í–µ—á–µ—Ä–∏–Ω–æ—á–Ω—ã–µ")
async def cmd_choose_party_board_game(message: types.Message):
    buttons = set_board_games_buttons()
    await message.answer("–û—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç–æ–ª–æ–∫: ", reply_markup = buttons)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ‚Äù
@dp.message_handler(lambda message: message.text == f"{'ü•Ç'} –ö–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ")
async def cmd_choose_cooperative_board_game(message: types.Message):
    buttons = set_board_games_buttons()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup = buttons)

@dp.message_handler(content_types=['web_app_data'])
async def get_player_board_game_message(message: types.Message):
    board_game = json.loads(message.web_app_data.data)
    
    try:
        global board_game_info
        board_game_info = board_game
        flag = board_game["artyom"]
        print(flag)
        try:
            kb = [
                [
                    types.InlineKeyboardButton(text=f"{'üíé'} –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", callback_data='zodiac')
                ],
                [
                    types.InlineKeyboardButton(text=f"‚è™‚Äç", callback_data='zodiac'),
                    types.InlineKeyboardButton(text=f"‚è©", callback_data='zodiac')
                ]
            ]
            rent_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
            await message.answer_photo(caption=ut.getDescGame(board_game),
                                    photo=urllib.parse.urlparse(board_game["Image"]).geturl(), parse_mode=ParseMode.HTML,
                                    reply_markup=rent_keyboard)
        except:
            await ut.BoardGame.name.set()
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏: ", reply_markup= await SimpleCalendar().start_calendar())
    except:
        try:
            kb = [
                [
                    types.InlineKeyboardButton(text=f"{'üíé'} –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å", callback_data='zodiac')
                ],
                [
                    types.InlineKeyboardButton(text=f"‚è™‚Äç", callback_data='zodiac'),
                    types.InlineKeyboardButton(text=f"‚è©", callback_data='zodiac')
                ]
            ]
            rent_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
            await message.answer_photo(caption=ut.getDescGame(board_game),
                                    photo=urllib.parse.urlparse(board_game["img"]).geturl(), parse_mode=ParseMode.HTML,
                                    reply_markup=rent_keyboard)
        except:
            await ut.BoardGame.name.set()
            await message.answer(text='üî•–í–ê–£ –†–µ–¥–∫–∞—è –Ω–∞—Å—Ç–æ–ª–∫–∞!\n'
                                    '–î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –Ω–µ–π –º–∏—Ä—É\n\n'
                                    '**1/6** –ö–∞–∫ –æ–Ω–∞ –Ω–∞–∑–≤–∞–µ—Ç—Å—è?')

# simple calendar usage
@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(f'–î–∞—Ç–∞: {date.strftime("%d/%m/%Y")}')
        time_msg.append(f'{date.strftime("%d/%m/%Y")}')
        await callback_query.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: ", reply_markup=await SimpleClock().start_clock())
        
# simple clock usage
@dp.callback_query_handler(clock_callback.filter())
async def process_simple_clock(callback_query: types.CallbackQuery, callback_data: dict):
    global delivary_date
    selected, date = await SimpleClock().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(f'–í—Ä–µ–º—è: {date.strftime("%H:%M")}')
        time_msg.append(f'{date.strftime("%H:%M")}')
        delivary_date +=1
        if delivary_date > 1:
            poll_keyboard = types.InlineKeyboardMarkup()
            poll_keyboard.add(types.InlineKeyboardButton(text = f"{'‚úÖ'} –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='place_order'))
            await callback_query.message.answer(ut.create_before_check_order_details_msg(), reply_markup = poll_keyboard)
        else:
            await callback_query.message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–¥–∞—á–∏: ", reply_markup=await SimpleCalendar().start_calendar())

@dp.callback_query_handler(lambda c: c.data == 'place_order')
async def check_order_details(callback_query: types.CallbackQuery):
    global time_msg, board_game_info

    print(board_game_info)

    board_game_msg = {"delivery_date": time_msg[0], "return_date": time_msg[2],
                      "ID_Boardgame":board_game_info["ID_Boardgame"],"ID_Owner":board_game_info["ID_Owner"],
                      "ID_Renter":board_game_info["ID_Renter"]}
    
    await bot.send_photo(callback_query.from_user.id, "https://m.media-amazon.com/images/I/813J0DBqCTL._AC_UF894,1000_QL80_.jpg",
                        caption=ut.create_check_order_details_msg(board_game_info["ID"], [board_game_info["Status"]], 
                        time_msg[0], time_msg[2], callback_query.from_user.full_name),
                        reply_markup=types.ReplyKeyboardRemove())
    
    response = requests.get(
                f"https://humorous-ringtail-abnormally.ngrok-free.app/addOrder?Order_time={board_game_msg['delivery_date']}"
                f"&ID_renter={board_game_msg['ID_Renter']}&ID_boardgame={board_game_msg['ID_Boardgame']}&ID_owner={board_game_msg['ID_Owner']}"
            )
    
    print(response.status_code)
    
    await callback_query.message.reply(ut.create_start_msg(callback_query.from_user.first_name), reply_markup=set_main_keyboard_buttons())

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è‚Äù
@dp.message_handler(lambda message: message.text == f"{'‚ùì'} –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è")
async def cmd_unknown_board_game(message: types.Message):
    random_board_game_msg = ut.create_random_board_game_msg()
    poll_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    poll_keyboard.add(types.KeyboardButton(text=f"{'üîÆ'} –†–∞–Ω–¥–æ–º–Ω–∞—è –∏–≥—Ä–∞"))
    poll_keyboard.add(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.reply(random_board_game_msg, reply_markup=poll_keyboard)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú{'üîÆ'} –†–∞–Ω–¥–æ–º–Ω–∞—è –∏–≥—Ä–∞"‚Äù
@dp.message_handler(lambda message: message.text == f"{'üîÆ'} –†–∞–Ω–¥–æ–º–Ω–∞—è –∏–≥—Ä–∞")
async def cmd_get_random_board_game(message: types.Message):
    poll_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    poll_keyboard.add(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    await message.reply("–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è...", reply_markup=poll_keyboard)

#############################################

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–°–¥–∞—é –Ω–∞—Å—Ç–æ–ª–∫—É‚Äù
@dp.message_handler(lambda message: message.text == "–°–¥–∞—é –Ω–∞—Å—Ç–æ–ª–∫—É")
async def cmd_rent_board_game(message: types.Message):
    await message.answer(ut.rent_add_text)
    rent_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rent_keyboard.add(types.KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–∞—Å—Ç–æ–ª–∫—É', web_app=WebAppInfo(
        url="https://hack.alieksandrzviez.repl.co")))
    rent_keyboard.add(types.KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=rent_keyboard)

# 1/6 set name
@dp.message_handler(state=ut.BoardGame.name)
async def insert_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await ut.BoardGame.next()
    await message.answer("**2/6** –¢–µ–ø–µ—Ä—å –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ú–æ–∂–µ—à—å —Å–æ–≤—Å–µ–º –∫—Ä–∞—Ç–µ–Ω—å–∫–æ, –µ—Å–ª–∏ —á—Ç–æ –º—ã –¥–æ–ø–æ–ª–Ω–∏–º üòº")


# 2/6 set desc
@dp.message_handler(state=ut.BoardGame.desc)
async def insert_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['desc'] = message.text

    await ut.BoardGame.next()
    await message.answer("**3/6** –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ")


# 3/6 set image
@dp.message_handler(state=ut.BoardGame.image)
async def insert_image(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['image'] = message.text

    await ut.BoardGame.next()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("üë®‚Äçüë©‚Äçüëß —Å–µ–º–µ–π–Ω—ã–µ", "üéØ—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    markup.add("üß¨ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ", "üéâ –≤–µ—á–µ—Ä–∏–Ω–æ—á–Ω—ã–µ")
    markup.add("ü•Ç –∫–æ–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ")

    await message.answer("**4/6** –ö –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–µ—Å–µ—à—å –µ–µ?", reply_markup=markup)


# 4/6 set filter
@dp.message_handler(state=ut.BoardGame.filter)
async def insert_filter(message: types.Message, state: FSMContext):
    await ut.BoardGame.next()
    await state.update_data(filter=ut.emoji_pattern.sub(r'', message.text).strip())

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("üíÖ –õ–µ–≥–∫–∞—è", "üòÖ –°—Ä–µ–¥–Ω—è—è")
    markup.add("üôÄ –°–ª–æ–∂–Ω–∞—è", "üíÄ –ù–µ—Ä–µ–∞–ª—å–Ω–∞—è")

    await message.answer("**5/6** –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç–æ–ª—å–Ω–∞—è –∏–≥—Ä–∞?", reply_markup=markup)


# 5/6 set category
@dp.message_handler(state=ut.BoardGame.category)
async def insert_desc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['category'] = ut.emoji_pattern.sub(r'', message.text).strip()

    await ut.BoardGame.next()
    await message.answer("**6/6** –ò —Å–∞–º–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ...\n–ù–∞–∑–Ω–∞—á—å —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏", reply_markup=types.ReplyKeyboardRemove())


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª, –≤—ã–≤–æ–¥–∏–º –∞–Ω–∫–µ—Ç—É
@dp.message_handler(state=ut.BoardGame.price)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['price'] = message.text

    kb = [
        [
            types.InlineKeyboardButton(text=f"{'‚Ü©'} –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='zodiac'),
            types.InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='zodiac')
        ],
        [

            types.InlineKeyboardButton(text=f"üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='zodiac')
        ]
    ]
    rent_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

    data = await state.get_data()
    await message.answer_photo(caption=ut.getDescGameFrom(data),
                               photo=urllib.parse.urlparse(data["image"]).geturl(), parse_mode=ParseMode.HTML,
                               reply_markup=rent_keyboard)

    await state.finish()

#############################################

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ‚Äù
@dp.message_handler(lambda message: message.text == "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ")
async def cmd_bot_info(message: types.Message):
    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    poll_keyboard = types.InlineKeyboardMarkup()
    poll_keyboard.add(types.InlineKeyboardButton(text=f"{'üö¥'} –î–æ—Å—Ç–∞–≤–∫–∞", callback_data='delivery'))
    poll_keyboard.add(types.InlineKeyboardButton(text=f"{'üí∞'} –û–ø–ª–∞—Ç–∞", callback_data='payment'))
    poll_keyboard.add(types.InlineKeyboardButton(text=f"{'‚ùì'} FAQ", callback_data='faq'))
    # –≤—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_msg = ut.create_bot_info_msg()
    await message.reply(start_msg, reply_markup=poll_keyboard)

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äú–î–æ—Å—Ç–∞–≤–∫–∞‚Äù
@dp.callback_query_handler(lambda c: c.data == 'delivery')
async def process_delivery_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, ut.create_delivery_msg())

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äú–î–æ—Å—Ç–∞–≤–∫–∞‚Äù
@dp.callback_query_handler(lambda c: c.data == 'payment')
async def process_payment_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, ut.create_payment_msg())

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ‚Äú–î–æ—Å—Ç–∞–≤–∫–∞‚Äù
@dp.callback_query_handler(lambda c: c.data == 'faq')
async def process_faq_button(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, ut.create_faq_msg())

#############################################

#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º ‚Äú–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚Äù
@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def cmd_return_main_menu(message: types.Message):
    buttons = set_main_keyboard_buttons()
    await message.reply(ut.create_start_msg(message.from_user.first_name), reply_markup=buttons)


# —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç, –µ—Å–ª–∏ –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç, –∞ —Ç–∫
# —ç—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∏—Å–ø–æ–ª–Ω—è—é—â–∏–π —Ñ–∞–π–ª, —Ç–æ —É—Å–ª–æ–≤–∏–µ –≤—Å–µ–≥–¥–∞ true
if __name__ == '__main__':

    dp.register_callback_query_handler(process_simple_clock,simple_cal_callback.filter())
    # –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞
    executor.start_polling(dp)
